// Example program
#include <iostream>
#include <string>
#include<math.h>

    float chargeCurrent = 0;
    float dischargeCurrent = 0;

    float limitedChargeCurrent = 0;
    float limitedDischargeCurrent = 0;

    char limitedChargeCurrentReason[200];
    char limitedDischargeCurrentReason[200];
    
    float rampUpLimitedChargeCurrent = -1;
    float rampUpLimitedDischargeCurrent = -1;

    bool chargeIsLimited = false;
    bool dischargeIsLimited = false;

    void initValues(float initChargeCurrent, float initDischargeCurrent) {
        chargeCurrent = initChargeCurrent;
        dischargeCurrent = initDischargeCurrent;
        
        limitedChargeCurrent = chargeCurrent;
        limitedDischargeCurrent = dischargeCurrent;
        
        strcpy(limitedChargeCurrentReason,"");
        strcpy(limitedDischargeCurrentReason,"");
        
        if (rampUpLimitedChargeCurrent == -1) {
          rampUpLimitedChargeCurrent = chargeCurrent;
        } 
        
        if (rampUpLimitedDischargeCurrent == -1) {
          rampUpLimitedDischargeCurrent = dischargeCurrent;
        }
    }
    
    void limitAbsolutChargeCurrent(float maximum) {
        if (limitedChargeCurrent > maximum) {
            limitedChargeCurrent = maximum;  
        }
    }

    void limitAbsolutDischargeCurrent(float maximum) {
        if (limitedDischargeCurrent > maximum) {
            limitedDischargeCurrent = maximum;  
        }
    }
    
    void limitChargeCurrent(float val, float minimum, float maximum, float bufferFromMax, const char* limitText, bool byPowerOf) {
        if ((maximum > minimum && val > minimum)
            || (maximum < minimum && val < minimum)) {
            
            if (maximum > minimum) {
                maximum -= (maximum - minimum) * bufferFromMax;
            } else if (maximum < minimum) {
                maximum += (minimum - maximum) * bufferFromMax;
            }
            
            float limitFactor = 1;
            
            if (byPowerOf) {
                limitFactor = 1 - pow(((val - minimum) / (maximum - minimum)), 2);
            } else {
                limitFactor = 1 - ((val - minimum) / (maximum - minimum));
            }
            
            float chargeLimit = fmax(0.0f, chargeCurrent * limitFactor);

            if (limitedChargeCurrent > chargeLimit) {
                limitedChargeCurrent = chargeLimit;
                strcpy(limitedChargeCurrentReason, "charge limited by ");
                strcat(limitedChargeCurrentReason, limitText);
                chargeIsLimited = true;
            }
        }
    }
    
    void limitChargeCurrent(float val, float minimum, float maximum, float bufferFromMax, const char* limitText) {
        limitChargeCurrent(val, minimum, maximum, bufferFromMax, limitText, false);
    }

    void limitDischargeCurrent(float val, float minimum, float maximum, float bufferFromMax, const char* limitText, bool byPowerOf) {
        if ((maximum > minimum && val > minimum)
            || (maximum < minimum && val < minimum)) {
            
            if (maximum > minimum) {
                maximum -= (maximum - minimum) * bufferFromMax;
            } else if (maximum < minimum) {
                maximum += (minimum - maximum) * bufferFromMax;
            }
            
            float limitFactor = 1;
            
            if (byPowerOf) {
                limitFactor = 1 - pow(((val - minimum) / (maximum - minimum)), 2);
            } else {
                limitFactor = 1 - ((val - minimum) / (maximum - minimum));
            }
            
            float dischargeLimit = fmax(0.0f, dischargeCurrent * limitFactor);
            
            if (limitedDischargeCurrent > dischargeLimit) {
                limitedDischargeCurrent = dischargeLimit;
                strcpy(limitedDischargeCurrentReason, "discharge limited by ");
                strcat(limitedDischargeCurrentReason, limitText);
                dischargeIsLimited = true;
            } 
        }
    }
    
    void limitDischargeCurrent(float val, float minimum, float maximum, float bufferFromMax, const char* limitText) {
        limitDischargeCurrent(val, minimum, maximum, bufferFromMax, limitText, false);
    }

    void limitChargeAndDischargeCurrent(float val, float minimum, float maximum, float bufferFromMax, const char* limitText, bool byPowerOf) {
        limitChargeCurrent(val, minimum, maximum, bufferFromMax, limitText, byPowerOf);
        limitDischargeCurrent(val, minimum, maximum, bufferFromMax, limitText, byPowerOf);
    }
    
    void limitChargeAndDischargeCurrent(float val, float minimum, float maximum, float bufferFromMax, const char* limitText) {
        limitChargeCurrent(val, minimum, maximum, bufferFromMax, limitText, false);
        limitDischargeCurrent(val, minimum, maximum, bufferFromMax, limitText, false);
    }
    
    void setRampups(float step) {
        // CHARGING
        if (chargeIsLimited) {
            if (limitedChargeCurrent > rampUpLimitedChargeCurrent) {
                strcpy(limitedChargeCurrentReason, "charge limited for ramp up by ");
                char str_f[20];
                sprintf(str_f, "%.1f", limitedChargeCurrent - rampUpLimitedChargeCurrent);
                strcat(limitedChargeCurrentReason, str_f);
                limitedChargeCurrent = rampUpLimitedChargeCurrent;
            } else {
                rampUpLimitedChargeCurrent = limitedChargeCurrent;
            }
            
            if (limitedChargeCurrent == chargeCurrent) {
                chargeIsLimited = false;
            }

            rampUpLimitedChargeCurrent += step;
        } else {
            rampUpLimitedChargeCurrent = limitedChargeCurrent;
        }

        // DISCHARGING
        if (dischargeIsLimited) {

            if (limitedDischargeCurrent > rampUpLimitedDischargeCurrent) {
                strcpy(limitedDischargeCurrentReason, "discharge limited for ramp up by ");
                char str_f[20];
                sprintf(str_f, "%.1f", limitedDischargeCurrent - rampUpLimitedDischargeCurrent);
                strcat(limitedDischargeCurrentReason, str_f);
                limitedDischargeCurrent = rampUpLimitedDischargeCurrent;
            } else {
                rampUpLimitedDischargeCurrent = limitedDischargeCurrent;
            }
            
            if (limitedDischargeCurrent == dischargeCurrent) {
                dischargeIsLimited = false;
            }

            rampUpLimitedDischargeCurrent += step;
        } else {
            rampUpLimitedDischargeCurrent = limitedDischargeCurrent;
        }
    }
    
    void runtest(float val) {
        initValues(100,100);
        limitChargeCurrent(val, 3.45, 3.65, 0.1, "cell overvoltage", false);
        setRampups(1);
        std::cout << "limitedChargeCurrent = " << uint16_t(round(limitedChargeCurrent * 10)) / 10.0f << " " << limitedChargeCurrentReason << "\n";
    }
    
int main()
{
    runtest(3.46);
    runtest(3.2);
    runtest(3.2);
    runtest(3.2);
    runtest(3.46);
    runtest(3.2);
    runtest(3.2);
    runtest(3.2);
    runtest(3.2);
    runtest(3.2);
    runtest(3.2);
    initValues(50,50);
    limitChargeCurrent(3.2, 3.45, 3.65, 0.1, "cell overvoltage", false);
    setRampups(1);
    std::cout << "limitedChargeCurrent = " << uint16_t(round(limitedChargeCurrent * 10)) / 10.0f << " " << limitedChargeCurrentReason << "\n";
    runtest(3.2);
    runtest(3.2);
    runtest(3.2);

    

    
    initValues(100,100);
    limitChargeCurrent(-12, -10, -20, 0.1, "yo", false);
    std::cout << "limitedChargeCurrent = " << uint16_t(round(limitedChargeCurrent * 10)) / 10.0f << "\n";
    
    initValues(100,100);
    limitChargeCurrent(3.3, 3.45, 3.65, 0.1, "yo", false);
    std::cout << "limitedChargeCurrent = " << uint16_t(round(limitedChargeCurrent * 10)) / 10.0f << "\n";
    
}